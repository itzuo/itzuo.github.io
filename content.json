{"meta":{"title":"MyTest","subtitle":"Test","description":"���ǲ���","author":"Zuo Jie","url":"http://zuojie.com"},"pages":[],"posts":[{"title":"AndroidMVVM","slug":"AndroidMVVM","date":"2017-07-14T08:30:24.000Z","updated":"2017-07-14T08:32:30.770Z","comments":true,"path":"2017/07/14/AndroidMVVM/","link":"","permalink":"http://zuojie.com/2017/07/14/AndroidMVVM/","excerpt":"","text":"AndroidMVVM采用dataBinding结合Retrofit+rxjava实现的MVVM框架这是初次提交项目代码，此项目还不怎么完善，日后还会更新。 Android实现数据DataBinding步骤一. 配置全局 创建一个空的Project，并修改Project的build.gradle，为build script添加一条依赖，Gradle版本最低为1.5.0。 1classpath 'com.android.tools.build:gradle:1.5.0' 为用到Data Binding的模块添加插件，修改对应的build.gradle。 123dataBinding &#123; enabled = true&#125; 二. 使用的开源库123456789/*retrofit start */compile 'com.squareup.retrofit2:retrofit:2.1.0'compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'compile 'com.squareup.retrofit2:converter-gson:2.1.0'/*retrofit end *//*rxjava start */compile 'io.reactivex:rxandroid:1.2.1'compile 'io.reactivex:rxjava:1.1.6'/*rxjava end */ 三. android上的JAVA8：使用retrolambdaJava8引入了lambda表达式，让许多开发者激动不已，本文介绍如何在Android上使用lambda。 1 . 首先下载 java8 sdk，并且配置完成2 . 在build.gradle中加入编译的依赖，这会使用retrolambda来编译Java代码123456789buildscript &#123; repositories &#123; jcenter() &#125; dependencies &#123; classpath 'com.android.tools.build:gradle:2.1.2' classpath 'me.tatarka:gradle-retrolambda:3.2.5' &#125;&#125; 同时要加入plugin声明1apply plugin: 'me.tatarka.retrolambda' 3 . 加入compileOptions,这会让IDE使用用JAVA8语法解析1234compileOptions &#123; sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8&#125; 4 . 添加测试代码, 对于只有一个方法的接口，java8中可以使用lambda表达式代替，所以我们熟悉的设定View点击事件的代码，只要这样写就可以了1v.setOnClickListener(v1 -&gt; Toast.makeText(getActivity(), \"clicked\", Toast.LENGTH_LONG).show()); 对比一下之前的代码量，是不是爽爆了？！！123456v.setOnClickListener(new View.OnClickListener(View v) &#123; @Override public void onClick(View v) &#123; Toast.makeText(getActivity(), \"clicked\", Toast.LENGTH_LONG).show() &#125;&#125;); 四. dataBinding之双向绑定我们要实现双向绑定只需要在原来@{loginViewModel.phone}的@后面加上=就可以了android:text=”@={loginViewModel.phone}”但是这里的phone必须是loginViewModel类的属性，并且必须要实现get、set方法。例如项目中的登录功能：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;layout xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;data&gt; &lt;variable name=\"loginViewModel\" type=\"com.zxj.androidmvvm.module.aas.viewModel.LoginViewModel\"/&gt; &lt;/data&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\"&gt; &lt;android.support.design.widget.TextInputLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"35dp\" android:layout_marginRight=\"35dp\" android:layout_marginTop=\"40dp\"&gt; &lt;EditText android:id=\"@+id/login_mobile_phone\" android:layout_width=\"match_parent\" android:layout_height=\"38dp\" android:drawableLeft=\"@mipmap/login_accoun\" android:drawablePadding=\"9dp\" android:hint=\"手机号码\" android:inputType=\"phone\" android:text=\"@=&#123;loginViewModel.phone&#125;\" android:textColorHint=\"@color/stoke\" android:textSize=\"14sp\"/&gt; &lt;/android.support.design.widget.TextInputLayout&gt; &lt;android.support.design.widget.TextInputLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"35dp\" android:layout_marginRight=\"35dp\"&gt; &lt;EditText android:id=\"@+id/login_password\" android:layout_width=\"match_parent\" android:layout_height=\"38dp\" android:drawableLeft=\"@mipmap/login_accoun\" android:drawablePadding=\"9dp\" android:hint=\"密码\" android:inputType=\"textPassword\" android:text=\"@=&#123;loginViewModel.password&#125;\" android:textColorHint=\"@color/stoke\" android:textSize=\"14sp\"/&gt; &lt;/android.support.design.widget.TextInputLayout&gt; &lt;Button android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"35dp\" android:layout_marginRight=\"35dp\" android:layout_marginTop=\"35dp\" android:background=\"@drawable/selector_confim_btn\" android:onClick=\"@&#123;loginViewModel.onLoginClick&#125;\" android:text=\"登录\" android:textColor=\"@android:color/white\" android:textSize=\"15sp\"/&gt; ... &lt;/LinearLayout&gt;&lt;/layout&gt; 12345678910111213141516171819202122232425262728293031public class LoginViewModel extends BaseViewModel &#123; private String phone,password; public LoginViewModel(Context context, ActivityBaseViewBinding baseViewBinding) &#123; super(context, baseViewBinding); &#125; public void onLoginClick(View view)&#123; if(!TextUtils.isEmpty(phone) &amp;!TextUtils.isEmpty(password))&#123; mobileLogin(phone,password); &#125; &#125; ... public String getPhone() &#123; return phone; &#125; public void setPhone(String phone) &#123; this.phone = phone; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125;&#125; 五、Retrofit与Rxjava实现多文件上传参见：http://blog.csdn.net/soslinken/article/details/51274327 上传接口服务123@Multipart@POST(\"i/evaluate/uploadEvalateImg\")Observable&lt;UploadPhotoBean&gt; postUploadEvalateImg(@PartMap Map&lt;String, RequestBody&gt; params); 此处使用@PartMap注释，传递多个Part，以实现多文件上传。 rxjava代码123456789101112131415161718RequestBody requestBody = RequestBody.create(MediaType.parse(\"multipart/form-data\"), finalFile);Map&lt;String, RequestBody&gt; map = new HashMap&lt;&gt;();String key = evaImg + \"\\\"; filename=\\\"\" + finalFile.getName();map.put(key, requestBody);MyService service = (MyService) RetrofitFactory.create(MyService.class);service.postUploadEvalateImg(map) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(uploadPhotoBean -&gt; &#123; ILog.e(\"第\" + finalI + \"个上传成功\"); photos.add(images.get(finalI));//记录上传成功的图片 FileUtil.deleteFile(finalFile.getAbsolutePath());//上传成功后删除上传的图片文件 mCallback.onSuccess(uploadPhotoBean); &#125;, throwable -&gt; &#123; mCallback.onFailure(throwable); &#125;); 关键还是在于map.put(evaImg + “\\”; filename=\\”” + finalFile.getName(), fileBody);此处的key就充当了单文件上传时@Part中设置的参数。 六、解决Adapter中的关于EditText、RatingBar等控件的复用问题如下图：有EditText、RatingBar和嵌套的RecyclerView(显示选择的图片)会出现复用问题 具体解决如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164public class GoodsCommentsRvAdapter extends RecyclerView.Adapter&lt;GoodsCommentsRvAdapter.GoodsCommentsViewHolder&gt; &#123; private List&lt;EvaluateBean.DataBean.EvaluateDatasBean&gt; mEvaluateDatas = new ArrayList&lt;&gt;(); private ItemGoodsCommentsBinding mBinding; private int index; private ActivityBaseViewBinding mActivityBaseViewBinding; private Map&lt;Integer,UploadPhotoViewModel&gt; flag = new HashMap&lt;&gt;(); public GoodsCommentsRvAdapter(ActivityBaseViewBinding activityBaseViewBinding) &#123; mActivityBaseViewBinding = activityBaseViewBinding; &#125; @Override public GoodsCommentsViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext()); mBinding = DataBindingUtil.inflate(layoutInflater, R.layout.item_goods_comments, parent, false); GoodsCommentsViewHolder holder = new GoodsCommentsViewHolder(mBinding); return holder; &#125; @Override public void onBindViewHolder(GoodsCommentsViewHolder holder, int position) &#123; EvaluateBean.DataBean.EvaluateDatasBean evaluateDatasBean = mEvaluateDatas.get(position); holder.getBinding().setVariable(BR.evaluateDatasBean, evaluateDatasBean); /*************************解决嵌套的RecyclerView复用问题 start*****************************/ UploadPhotoViewModel viewModel = new UploadPhotoViewModel(mActivityBaseViewBinding); viewModel.setPosition(position); if(flag.containsKey(position))&#123; holder.getBinding().setUploadPhotoViewModel(flag.get(position)); &#125;else &#123; holder.getBinding().setUploadPhotoViewModel(viewModel); &#125; viewModel.setOnClickListener(new UploadPhotoViewModel.OnClickListener() &#123; @Override public void onClick() &#123; flag.put(position,viewModel); &#125; &#125;); /*************************解决嵌套的RecyclerView复用问题 end*****************************/ /*************************解决RatingBar复用问题 start*****************************/ evaluateDatasBean.setEvaluateVal(evaluateDatasBean.getEvaluateVal() != 0 ? evaluateDatasBean.getEvaluateVal() : 5); holder.getBinding().goodsCommentsRating.setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener() &#123; @Override public void onRatingChanged(RatingBar ratingBar, float rating, boolean fromUser) &#123; ILog.e(\"position:\"+position); evaluateDatasBean.setEvaluateVal(rating); &#125; &#125;); /*************************解决RatingBar复用问题 end*****************************/ /*************************解决EditText复用问题 start*****************************/ // 移除添加的TextWatcher，确保在第2步TextWatcher不会触发; if (holder.getBinding().goodsCommentsContent.getTag() instanceof TextWatcher) &#123; holder.getBinding().goodsCommentsContent.removeTextChangedListener((TextWatcher) (holder.getBinding().goodsCommentsContent.getTag())); &#125; /** * 记录当前位置 */ holder.getBinding().goodsCommentsContent.setOnTouchListener(new View.OnTouchListener() &#123; @Override public boolean onTouch(View v, MotionEvent event) &#123; if (event.getAction() == MotionEvent.ACTION_UP) &#123; index = position; &#125; return false; &#125; &#125;); if (index == position) &#123; //如果当前的行下标和点击事件中保存的index一致，手动为EditText设置焦点 holder.getBinding().goodsCommentsContent.requestFocus(); &#125; else &#123; holder.getBinding().goodsCommentsContent.clearFocus(); &#125; if (TextUtils.isEmpty(evaluateDatasBean.getDescription())) &#123; holder.getBinding().goodsCommentsContent.setText(\"\"); &#125; else &#123; holder.getBinding().goodsCommentsContent.setText(evaluateDatasBean.getDescription()); &#125; MyTextWatcher myTextWatcher = new MyTextWatcher(evaluateDatasBean); holder.getBinding().goodsCommentsContent.addTextChangedListener(myTextWatcher); holder.getBinding().goodsCommentsContent.setTag(myTextWatcher); /*************************解决EditText复用问题 end*****************************/ &#125; @Override public int getItemCount() &#123; return mEvaluateDatas != null ? mEvaluateDatas.size() : 0; &#125; public class GoodsCommentsViewHolder extends RecyclerView.ViewHolder &#123; ItemGoodsCommentsBinding mBinding; public GoodsCommentsViewHolder(ItemGoodsCommentsBinding binding) &#123; super(binding.getRoot()); this.mBinding = binding; &#125; public ItemGoodsCommentsBinding getBinding() &#123; return mBinding; &#125; &#125; /** * 当加载更多的时候可以使用 * * @param evaluateDatas */ public void addData(List&lt;EvaluateBean.DataBean.EvaluateDatasBean&gt; evaluateDatas) &#123; if (evaluateDatas != null) &#123; mEvaluateDatas.addAll(evaluateDatas); &#125; notifyDataSetChanged(); &#125; /** * 更新Adapter * * @param evaluateDatas */ public void replaceData(List&lt;EvaluateBean.DataBean.EvaluateDatasBean&gt; evaluateDatas) &#123; if (evaluateDatas != null) &#123; mEvaluateDatas.clear(); addData(evaluateDatas); &#125; &#125; ... /** * 自定义TextWatcher */ class MyTextWatcher implements TextWatcher &#123; private EvaluateBean.DataBean.EvaluateDatasBean evaluateDatasBean; public MyTextWatcher(EvaluateBean.DataBean.EvaluateDatasBean evaluateDatasBean) &#123; this.evaluateDatasBean = evaluateDatasBean; &#125; @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) &#123; &#125; @Override public void onTextChanged(CharSequence s, int start, int before, int count) &#123; &#125; @Override public void afterTextChanged(Editable s) &#123; if (TextUtils.isEmpty(s)) &#123; evaluateDatasBean.setDescription(\"\"); &#125; else &#123; evaluateDatasBean.setDescription(s.toString()); &#125; &#125; &#125;&#125;","categories":[],"tags":[]},{"title":"Hello","slug":"Hello","date":"2017-07-14T07:34:52.000Z","updated":"2017-07-14T08:32:43.478Z","comments":true,"path":"2017/07/14/Hello/","link":"","permalink":"http://zuojie.com/2017/07/14/Hello/","excerpt":"","text":"你好这是我的第一篇文章:)","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-07-14T07:20:52.819Z","updated":"2017-07-14T07:20:52.820Z","comments":true,"path":"2017/07/14/hello-world/","link":"","permalink":"http://zuojie.com/2017/07/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}